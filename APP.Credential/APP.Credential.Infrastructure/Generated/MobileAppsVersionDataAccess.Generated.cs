//Generated by .NET Class Generator Tools

using System;
using System.Data;
using System.Data.SqlClient;
using APP.Framework.Infrastructure;

using APP.Credential.Domain;
using System.Collections.Generic;

namespace APP.Credential.Infrastructure
{
public partial class MobileAppsVersionDataAccess
{	private DAL DALInfo;

	public MobileAppsVersionDataAccess(DAL objDAL)
	{
		DALInfo = objDAL;
		DALInfo.ConnectionString = new Connection(DALInfo).ConnectionString(DALInfo.ApplicationMode);
	}

	private static T Mapper<T>(object obj)
	{
		T val = default(T);
		if (obj != DBNull.Value)
		{
			val = (T) obj;
		}
		return val;
	}



#region Standard
public MobileAppsVersion GetMobileAppsVersionByMobileAppsVersionID(string IDMill,string Apps,string VersionName,string VersionCode)
{
	SqlConnection conn = new SqlConnection(DALInfo.ConnectionString);
	SqlCommand cmd = new SqlCommand("up_RetrieveMobileAppsVersion", conn);
	MobileAppsVersion objTbl = new MobileAppsVersion();
	cmd.CommandType = CommandType.StoredProcedure;

	cmd.Parameters.AddWithValue("@IDMill",IDMill);	cmd.Parameters.AddWithValue("@Apps",Apps);	cmd.Parameters.AddWithValue("@VersionName",VersionName);	cmd.Parameters.AddWithValue("@VersionCode",VersionCode);
	SqlDataReader da = default(SqlDataReader);
	try
	{
		cmd.Connection.Open();
		da = cmd.ExecuteReader();

		if (da.HasRows)
		{
			objTbl = MoveDataToCollection(da)[0];
		}
		else
		{
			return null;
		}
	}
	catch (Exception ex)
	{
		throw ex;
	}
	finally
	{
		da.Close();
		conn.Close();
		cmd.Dispose();
	}

	return objTbl;
}


public List<MobileAppsVersion> GetMobileAppsVersionList()
{
	SqlConnection conn = new SqlConnection(DALInfo.ConnectionString);
	SqlCommand cmd = new SqlCommand("up_RetrieveMobileAppsVersionList", conn);
	List<MobileAppsVersion> mobileAppsVersionList = new List<MobileAppsVersion>();
	cmd.CommandType = CommandType.StoredProcedure;

	SqlDataReader da = default(SqlDataReader);
	try
	{
		cmd.Connection.Open();
		da = cmd.ExecuteReader();

		if (da.HasRows)
		{
			mobileAppsVersionList = MoveDataToCollection(da);
		}
		else
		{
			return mobileAppsVersionList;
		}
	}
	catch (Exception ex)
	{
		throw ex;
	}
	finally
	{
		da.Close();
		conn.Close();
		cmd.Dispose();
	}

	return mobileAppsVersionList;
}


public List<MobileAppsVersion> GetMobileAppsVersionListCustom(string Where, string OrderBy, int Start, int Limit)
{
	SqlConnection conn = new SqlConnection(DALInfo.ConnectionString);
	SqlCommand cmd = new SqlCommand("up_RetrieveMobileAppsVersionListCustom", conn);
	SqlParameter orderBy = new SqlParameter("@OrderBy", SqlDbType.VarChar);
	SqlParameter where = new SqlParameter("@Where", SqlDbType.VarChar);
	SqlParameter start = new SqlParameter("@Start", SqlDbType.Int);
	SqlParameter limit = new SqlParameter("@Limit", SqlDbType.VarChar);

	Start = (Start - 1) * Limit;

	where.Value = Where;
	orderBy.Value = OrderBy;
	start.Value = Start;
	limit.Value = Limit;

	cmd.Parameters.Add(where);
	cmd.Parameters.Add(orderBy);
	cmd.Parameters.Add(start);
	cmd.Parameters.Add(limit);

	List<MobileAppsVersion> mobileAppsVersionList = new List<MobileAppsVersion>();
	cmd.CommandType = CommandType.StoredProcedure;

	SqlDataReader da = default(SqlDataReader);
	cmd.Connection.Open();
	da = cmd.ExecuteReader();

	try
	{
		if (da.HasRows)
		{
			if (Start == 0 && Limit == 0)
			{
				mobileAppsVersionList = MoveDataToCollection(da, false);
			}
			else
			{
				mobileAppsVersionList = MoveDataToCollection(da, true);
			}
		}
		else
		{
			return mobileAppsVersionList;
		}
	}
	finally
	{
		da.Close();
		conn.Close();
		cmd.Dispose();
	}

	return mobileAppsVersionList;
}


private List<MobileAppsVersion> MoveDataToCollection(SqlDataReader MyReader,Boolean isCustom = false)
{
	List<MobileAppsVersion> mobileAppsVersionList = new List<MobileAppsVersion>();
	while (MyReader.Read())
	{
		MobileAppsVersion objMobileAppsVersion = new MobileAppsVersion();
		objMobileAppsVersion.IDMill = MyReader["idmill"].ToString().Trim();
		objMobileAppsVersion.Apps = MyReader["apps"].ToString().Trim();
		objMobileAppsVersion.VersionName = MyReader["versionname"].ToString().Trim();
		objMobileAppsVersion.VersionCode = MyReader["versioncode"].ToString().Trim();
		objMobileAppsVersion.DownloadURL = MyReader["downloadurl"].ToString().Trim();
		objMobileAppsVersion.ReleaseDate = Mapper<DateTime?>(MyReader["releasedate"]);
		objMobileAppsVersion.Remark = MyReader["remark"].ToString().Trim();
		objMobileAppsVersion.CrtUsrID = MyReader["crtusrid"].ToString().Trim();
		objMobileAppsVersion.TsCrt = Mapper<DateTime>(MyReader["tscrt"]);
		objMobileAppsVersion.ModUsrID = MyReader["modusrid"].ToString().Trim();
		objMobileAppsVersion.TsMod = Mapper<DateTime>(MyReader["tsmod"]);
		objMobileAppsVersion.ActiveFlag = MyReader["activeflag"].ToString().Trim();
		objMobileAppsVersion.RowState = DataRowState.Unchanged;

		if (isCustom == true)
		{
			objMobileAppsVersion.RowNumber = Convert.ToInt64(MyReader["RowNumber"]);
			objMobileAppsVersion.TotalRecord = Convert.ToInt64(MyReader["TotalRecord"]);
		}
		mobileAppsVersionList.Add(objMobileAppsVersion);
	}
	return mobileAppsVersionList;
}


public TransactionResult Update(ref List<MobileAppsVersion> objList)
{
	List<SqlCommand> ArraySQLCmd = new List<SqlCommand>();
	TransactionDB TransDB = new TransactionDB(DALInfo);
	TransactionResult ObjTransResult = default(TransactionResult);

	GetBatchQueryUpdate(objList,ref ArraySQLCmd);

	ObjTransResult = TransDB.BatchUpdate(ArraySQLCmd);

	if (ObjTransResult.Result == 1)
	{
		objList = AcceptChanges(ref objList);
	}

	return ObjTransResult;
}

public TransactionResult Update(ref MobileAppsVersion item)
{
	List<SqlCommand> ArraySQLCmd = new List<SqlCommand>();
	TransactionDB TransDB = new TransactionDB(DALInfo);
	TransactionResult ObjTransResult = default(TransactionResult);

	GetSingleQueryUpdate(item,ref ArraySQLCmd);

	ObjTransResult = TransDB.BatchUpdate(ArraySQLCmd);

	if (ObjTransResult.Result == 1 && !item.RowState.Equals(DataRowState.Deleted))
	{
		item.RowState = DataRowState.Unchanged;
	}

	return ObjTransResult;
}

public List<MobileAppsVersion> AcceptChanges(ref List<MobileAppsVersion> objList)
{
	List<MobileAppsVersion> DataBindCol = new List<MobileAppsVersion>();

	foreach (MobileAppsVersion item in objList)
	{
		if (item.RowState != DataRowState.Deleted)
		{
			item.RowState = DataRowState.Unchanged;
			DataBindCol.Add(item);
		}
	}
	objList= new List<MobileAppsVersion>();
	objList = DataBindCol;
	return DataBindCol;
}

public void GetSingleQueryUpdate(MobileAppsVersion item, ref List<SqlCommand> ArraySQLCmd)
{
		MobileAppsVersion itm = item;
	DALInfo.AssignedInfo(ref itm);
	UpdateQuery(itm, ArraySQLCmd);
}

public void GetBatchQueryUpdate(List<MobileAppsVersion> objDomain, ref List<SqlCommand> ArraySQLCmd)
{
	foreach (MobileAppsVersion item in objDomain)
	{
		MobileAppsVersion itm = item;
		DALInfo.AssignedInfo(ref itm);
		UpdateQuery(itm, ArraySQLCmd);
	}
}

public void UpdateQuery(MobileAppsVersion item, List<SqlCommand> ArraySQLCmd)
{
	SqlCommand cmd = null;
	if (item.RowState == DataRowState.Added)
	{
		cmd = new SqlCommand("up_InsertMobileAppsVersion");
		cmd.CommandType = CommandType.StoredProcedure;
		cmd.Parameters.Add("@idmill", SqlDbType.VarChar, 10).Value = item.IDMill;
		cmd.Parameters.Add("@apps", SqlDbType.NChar, 20).Value = item.Apps;
		cmd.Parameters.Add("@versionname", SqlDbType.VarChar, 50).Value = item.VersionName;
		cmd.Parameters.Add("@versioncode", SqlDbType.VarChar, 10).Value = item.VersionCode;
		cmd.Parameters.Add("@downloadurl", SqlDbType.VarChar, 100).Value = item.DownloadURL == null ? (object)DBNull.Value : item.DownloadURL;
		cmd.Parameters.Add("@releasedate", SqlDbType.DateTime, 8).Value = item.ReleaseDate.HasValue == false ? (object)DBNull.Value : item.ReleaseDate.Value;
		cmd.Parameters.Add("@remark", SqlDbType.VarChar, 100).Value = item.Remark == null ? (object)DBNull.Value : item.Remark;
		cmd.Parameters.Add("@crtusrid", SqlDbType.VarChar, 20).Value = item.CrtUsrID;
		cmd.Parameters.Add("@modusrid", SqlDbType.VarChar, 20).Value = item.ModUsrID;
		cmd.Parameters.Add("@activeflag", SqlDbType.Char, 1).Value = item.ActiveFlag;
	}
	else if (item.RowState == DataRowState.Modified)
	{
		cmd = new SqlCommand("up_UpdateMobileAppsVersion");
		cmd.CommandType = CommandType.StoredProcedure;
		cmd.Parameters.Add("@idmill", SqlDbType.VarChar, 10).Value = item.IDMill;
		cmd.Parameters.Add("@apps", SqlDbType.NChar, 20).Value = item.Apps;
		cmd.Parameters.Add("@versionname", SqlDbType.VarChar, 50).Value = item.VersionName;
		cmd.Parameters.Add("@versioncode", SqlDbType.VarChar, 10).Value = item.VersionCode;
		cmd.Parameters.Add("@downloadurl", SqlDbType.VarChar, 100).Value = item.DownloadURL == null ? (object)DBNull.Value : item.DownloadURL;
		cmd.Parameters.Add("@releasedate", SqlDbType.DateTime, 8).Value = item.ReleaseDate.HasValue == false ? (object)DBNull.Value : item.ReleaseDate.Value;
		cmd.Parameters.Add("@remark", SqlDbType.VarChar, 100).Value = item.Remark == null ? (object)DBNull.Value : item.Remark;
		cmd.Parameters.Add("@modusrid", SqlDbType.VarChar, 20).Value = item.ModUsrID;
		cmd.Parameters.Add("@activeflag", SqlDbType.Char, 1).Value = item.ActiveFlag;
	}
	else if (item.RowState == DataRowState.Deleted)
	{
		cmd = new SqlCommand("up_DeleteMobileAppsVersion");
		cmd.CommandType = CommandType.StoredProcedure;
		cmd.Parameters.Add("@idmill", SqlDbType.VarChar, 10).Value = item.IDMill;
		cmd.Parameters.Add("@apps", SqlDbType.NChar, 20).Value = item.Apps;
		cmd.Parameters.Add("@versionname", SqlDbType.VarChar, 50).Value = item.VersionName;
		cmd.Parameters.Add("@versioncode", SqlDbType.VarChar, 10).Value = item.VersionCode;
		cmd.Parameters.Add("@modusrid", SqlDbType.VarChar, 20).Value = item.ModUsrID;
	}

	if (cmd != null)
	{
		ArraySQLCmd.Add(cmd);
	}
}


#endregion
}
}